{"version":3,"sources":["components/stateButton.jsx","components/alarmButtons.jsx","components/stateArrowProps.jsx","components/stateInfoPanelText.jsx","components/buttonBar.jsx","App.js","index.js"],"names":["StateButton","id","text","type","className","style","color","AlarmButton","onHoverText","onClickFunctionName","buttonsText","content","onClick","xArrowProps","startAnchor","position","offset","rightness","endAnchor","bottomness","curveness","opacity","panelTexts","deepSleep","factoryDefault","resettingAlarm","alarmConfirmed","sendingAlarm","notifyingAppManualAlarm","notifyingAppFallAlarm","lightSleep","sensing","ENUMSTATE","topBtnArray","btnId","textOnBtn","midTopBtnArray","midBtnArray","botBtnArray","allArrows","waitTenSeconds","ButtonBar","useState","counter","setCounter","alarmed","setAlarmed","intervalId","setIntervalId","currentState","setCurrentState","previousButton","setPreviousButton","isAlarmingFollowers","setIsAlarmingFollowers","isFactoryResetActive","setIsFactoryResetActive","blinkingLEDintervalId","setBlinkingLEDintervalId","currentStateInfoPanelText","setCurrentStateInfoPanelText","initialRender","useRef","disableAllArrows","arrowId","arrow","disableArrow","document","getElementById","enableArrow","startBlinking","stringOfPicToChange","clearInterval","src","blinkLEDId","setInterval","imgToChangeId","getAttribute","console","log","switchImages","useEffect","current","innerHTML","enableButton","changeOpacityOnStateButton","buttonId","timerGang","disableButton","setTimeout","clearTimeout","startAlarmCounter","disabled","fontWeight","border","margin","fontSize","map","stateBtnObject","start","end","App","backgroundColor","ReactDOM","render"],"mappings":"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","file":"static/js/main.e2955a9e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst StateButton = ({ id, text }) => {\r\n  return (\r\n    <button\r\n      id={id}\r\n      type=\"button\"\r\n      className=\"btn btn-circle btn-xl m-4 shadow-none\"\r\n      style={{ color: \"black\" }}\r\n    // Style skriver över app.css styles :)\r\n    >\r\n      {text}\r\n    </button>\r\n\r\n  );\r\n};\r\n\r\nexport default StateButton;\r\n","import React from \"react\";\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css'; // optional\r\n\r\nconst AlarmButton = ({ id, onHoverText, className, onClickFunctionName, buttonsText }) => {\r\n  return (\r\n  <Tippy content={\r\n    <div>\r\n      {onHoverText}\r\n    </div>}>\r\n    <button\r\n      id={id}\r\n      onClick={onClickFunctionName} // <- how should i use the brackets \r\n      className={className}                 // to say there should be a function here :D\r\n    >\r\n      {buttonsText}\r\n    </button>\r\n  </Tippy>\r\n  );\r\n};\r\n\r\nexport default AlarmButton;\r\n\r\n","\r\nvar botToTopProps = {\r\n  color: \"#F76F8E\", //#96616B\r\n  startAnchor: { position: \"top\", offset: { rightness: 15 } },\r\n  endAnchor: { position: \"bottom\", offset: { rightness: 15 } }\r\n}\r\nvar returnTopToBotProps = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"bottom\", offset: { rightness: -15 } },\r\n  endAnchor: { position: \"top\", offset: { rightness: -15 } }\r\n}\r\nvar sensingToNotifyAutoFall = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"right\", offset: { bottomness: -20 } },\r\n  endAnchor: { position: \"left\" },\r\n  curveness: 0.2\r\n}\r\nvar sensingToNotifyManualAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"right\", offset: { bottomness: 40, rightness: -15 } },\r\n  endAnchor: { position: \"left\", offset: { bottomness: 0 } },\r\n  curveness: 0.3\r\n}\r\nvar manualFallToSendAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"right\" },\r\n  endAnchor: { position: \"bottom\" },\r\n  curveness: 1\r\n}\r\nvar autoFallNotifyToSendAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"right\" },\r\n  endAnchor: { position: \"top\" },\r\n  curveness: 1\r\n}\r\nvar autoFallNotifyToResetAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"bottom\" },\r\n  endAnchor: { position: \"top\" },\r\n}\r\nvar sendingToResetAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"left\" },\r\n  endAnchor: { position: \"right\" },\r\n}\r\nvar sendingToConfirmAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"top\", offset: { rightness: -20, bottomness: 5 } },\r\n  endAnchor: { position: \"right\" },\r\n  curveness: 0.5\r\n}\r\nvar alarmConfirmedToResetAlarm = {\r\n  color: \"#F76F8E\",\r\n  opacity: 0.2,\r\n  startAnchor: { position: \"bottom\", offset: { rightness: 15 } },\r\n  endAnchor: { position: \"left\", offset: { bottomness: -15 } },\r\n  curveness: 0.5\r\n}\r\nvar resettingAlarmToSensing = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"left\", offset: { bottomness: 40, rightness: 15 } },\r\n  endAnchor: { position: \"right\", offset: { bottomness: 30, rightness: -10 } },\r\n  curveness: 0.3\r\n}\r\nvar manualAlarmToResetAlarm = {\r\n  color: \"#F76F8E\",\r\n  startAnchor: { position: \"top\" },\r\n  endAnchor: { position: \"bottom\" }\r\n}\r\n\r\n\r\nexport const xArrowProps = {\r\n  botToTopProps, \r\n  returnTopToBotProps,\r\n  sensingToNotifyAutoFall,\r\n  sensingToNotifyManualAlarm,\r\n  manualFallToSendAlarm,\r\n  autoFallNotifyToSendAlarm,\r\n  autoFallNotifyToResetAlarm,\r\n  sendingToResetAlarm,\r\n  sendingToConfirmAlarm,\r\n  alarmConfirmedToResetAlarm,\r\n  resettingAlarmToSensing,\r\n  manualAlarmToResetAlarm\r\n}","\r\n\r\nvar state = {\r\n  deepSleep:\"If no mobile successfully connects, pairs and bonds with the watch within\"\r\n  +\" 120 seconds, the watch stops advertising, turns the LED off, and enters Deep Sleep.\"\r\n  +\" If the user performs a factory reset the watch finally enters Deep Sleep too.\",\r\n\r\n  factoryDefault: `If there is\\n no stored pairing information (either because it’s`\r\n  +\" been removed by the user, i.e. factory reset, or because there has never been\"\r\n  +\" any, i.e. newly delivered from factory) when the watch is powered on or awoken\"\r\n  +\" from Deep Sleep it will enter Factory Default. Here the watch starts advertising\"\r\n  +\" its presence to nearby mobile devices for 120 seconds. While advertising, the LED\"\r\n  +\" indicates this by blinking with a blue light. If a mobile device manages to bond\"\r\n  +\" successfully, the watch will store the new bonding information and enters Sensing.\",\r\n\r\n  resettingAlarm: \"When in state 2, 3, 4, or 5, if the watch receives a Reset message from\"\r\n  +\" the mobile app or the user resets the alarm using the button it enters Resetting Alarm.\"\r\n  +\" In Resetting Alarm resetting procedure is performed before the state is immediately\"\r\n  +\" exited and the watch enters Sensing. If the user factory resets the watch in state 2,\"\r\n  +\" 3, 4 or 5 it passes through Resetting Alarm too before it enters Sensing, Factory\"\r\n  +\" Default and finally Deep Sleep.\",\r\n\r\n  alarmConfirmed: \"Once the alarm is confirmed by response centre or any follower/s the\"\r\n  +\" watch enters Alarm Confirmed. This is indicated by the LED for the user to know\"\r\n  +\" that someone is aware of and handles the alarm.\",\r\n\r\n  sendingAlarm: \"When the app has confirmed that an alarm has been triggered, manual or\"\r\n  +\" fall, it enters the Sending Alarm. In Sending the user has a grace period in the app\"\r\n  +\" where the user can cancel and reset the alarm before it is further escalated. After\"\r\n  +\" the alarm is escalated the app is awaiting human confirmation of the alarm, either by\"\r\n  +\" call centre or by one or more follower/s (a user of the app that is following a watch user).\",\r\n\r\n  notifyingAppManualAlarm: \"If an alarm is triggered by the user by pushing the button the\"\r\n  +\" watch enters Notify App Manual Alarm where it sends a notification to the mobile app.\"\r\n  +\" The watch continuously sends notifications until the app confirms the alarm (enter Sending Alarm)\"\r\n  +\" or the user resets the alarm with the button (enter Resetting Alarm).\",\r\n\r\n  notifyingAppFallAlarm: \"If a fall is detected the watch enters Notify App Fall Alarm where it sends\"\r\n  +\" a notification to the mobile app. The watch continuously sends notifications until the app\"\r\n  +\" confirms the alarm (enter Sending Alarm) or the user resets the alarm with the button (enter Resetting Alarm).\",\r\n\r\n  lightSleep: \"If the watch is non-moving for ca 2 min the watch shuts down most of its systems\"\r\n  +\" and lowers the threshold value from the accelerometer and enters Light Sleep. Only when the\"\r\n  +\" accelerometer registers movement above the threshold the watch enters Sensing again. This is\"\r\n  +\" to save battery if the watch is not worn or simply not moving, e.g. during the night.\"\r\n  +\" If the connection to the mobile app is lost the watch will start to indicate this by blinking\"\r\n  +\" after a grace period. The blinking can be confirmed/turned off by pressing the button. When\"\r\n  +\" the mobile app and the watch is reconnected the blinking stops.\",\r\n\r\n  sensing: \"This is the normal state of operation. In Sensing the watch samples accelerometer data,\"\r\n  +\" feeds it into ImagiMob’s SensorBeat algorithm and handles the result, i.e. whether a fall is\"\r\n  +\" detected or not. If the watch has previously bonded with the mobile app, the watch will enter\"\r\n  +\" Sensing when it is powered on. If the connection to the mobile app is lost the watch will start\"\r\n  +\" to indicate this by blinking after a grace period. The blinking can be confirmed/turned off by\"\r\n  +\" pressing the button. When the mobile app and the watch is reconnected the blinking stops.\"\r\n  \r\n} \r\n\r\nexport const panelTexts = {\r\n  state\r\n}","import React, { useState, useEffect, useRef, Fragment } from \"react\";\r\nimport StateButton from \"./stateButton\";\r\nimport AlarmButton from \"./alarmButtons\"\r\n\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css'; // optional\r\n\r\nimport Xarrow from \"react-xarrows\";\r\n\r\nimport { xArrowProps } from \"./stateArrowProps\"\r\nimport { panelTexts } from \"./stateInfoPanelText\"\r\n\r\n\r\n\r\nconst ENUMSTATE = {\r\n  SENSING_STATE: \"SENSING_STATE\", // 0\r\n  LIGHT_SLEEP_STATE: \"LIGHT_SLEEP_STATE\", // 1\r\n  NOTIFYING_APP_FALL_ALARM_STATE: \"NOTIFYING_APP_FALL_ALARM_STATE\", // 2\r\n  NOTIFYING_APP_MANUAL_ALARM_STATE: \"NOTIFYING_APP_MANUAL_ALARM_STATE\", // 3\r\n  SENDING_ALARM_STATE: \"SENDING_ALARM_STATE\", // 4\r\n  ALARM_CONFIRMED_STATE: \"ALARM_CONFIRMED_STATE\", // 5\r\n  RESETTING_ALARM_STATE: \"RESETTING_ALARM_STATE\", // 6\r\n  FACTORY_DEFAULT_STATE: \"FACTORY_DEFAULT_STATE\", // 7\r\n  DEEP_SLEEP_STATE: \"DEEP_SLEEP_STATE\" // 8\r\n};\r\n\r\nconst topBtnArray = [\r\n  { btnId: \"lightSleepStateBtn\", textOnBtn: \"Light Sleep\" },\r\n  { btnId: \"EMPTYBTN1\", textOnBtn: \"\" },\r\n  { btnId: \"notifyingAppFallAlarmStateBtn\", textOnBtn: \"Notifying App Fall Alarm\" },\r\n  { btnId: \"EMPTYBTN2\", textOnBtn: \"\" }\r\n];\r\nconst midTopBtnArray = [\r\n  { btnId: \"sensingStateBtn\", textOnBtn: \"Sensing\" },\r\n  { btnId: \"alarmConfirmedStateBtn\", textOnBtn: \"Alarm Confirmed\" },\r\n  { btnId: \"EMPTYBTN3\", textOnBtn: \"\" },\r\n  { btnId: \"EMPTYBTN4\", textOnBtn: \"\" }\r\n];\r\nconst midBtnArray = [\r\n  { btnId: \"factoryDefaultStateBtn\", textOnBtn: \"Factory Default\" },\r\n  { btnId: \"EMPTYBTN5\", textOnBtn: \"\" },\r\n  { btnId: \"resettingAlarmStateBtn\", textOnBtn: \"Resetting Alarm\" },\r\n  { btnId: \"sendingAlarmStateBtn\", textOnBtn: \"Sending Alarm\" }\r\n];\r\nconst botBtnArray = [\r\n  { btnId: \"deepSleepStateBtn\", textOnBtn: \"Deep Sleep\" },\r\n  { btnId: \"EMPTYBTN6\", textOnBtn: \"\" },\r\n  { btnId: \"notifyingAppManualAlarmStateBtn\", textOnBtn: \"Notify App Manual Alarm\" },\r\n  { btnId: \"EMPTYBTN7\", textOnBtn: \"\" }\r\n\r\n];\r\nconst allArrows = [\r\n  \"deepSleepToFactoryArrow\",\r\n  \"factoryDefaultToDeepSleepArrow\",\r\n  \"factoryDefaultToSensingArrow\",\r\n  \"sensingToFactoryDefaultArrow\",\r\n  \"sensingToLightSleep\",\r\n  \"lightSleepToSensing\",\r\n  \"sensingToNotifyingFallAlarm\",\r\n  \"sensingToNotifyingManualAlarm\",\r\n  \"notifyingManualAlarmToSendingAlarm\",\r\n  \"notifyingFallAlarmToSendingAlarm\",\r\n  \"notifyingFallAlarmToResettingAlarm\",\r\n  \"sendingAlarmToResettingAlarm\",\r\n  \"notifyingManualAlarmToResettingAlarm\",\r\n  \"sendingAlarmToAlarmConfirmed\",\r\n  \"alarmConfirmedToResettingAlarm\",\r\n  \"resettingAlarmToSensing\"\r\n];\r\n\r\nlet waitFiveSeconds = 5000;\r\nlet waitTenSeconds = 10000;\r\n\r\nconst ButtonBar = () => {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [alarmed, setAlarmed] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [currentState, setCurrentState] = useState(ENUMSTATE.DEEP_SLEEP_STATE);\r\n  const [previousButton, setPreviousButton] = useState(null);\r\n  const [isAlarmingFollowers, setIsAlarmingFollowers] = useState(false);\r\n  const [isFactoryResetActive, setIsFactoryResetActive] = useState(false);\r\n  const [blinkingLEDintervalId, setBlinkingLEDintervalId] = useState(null);\r\n  const [currentStateInfoPanelText, setCurrentStateInfoPanelText] = useState(\"No text\");\r\n\r\n  const initialRender = useRef(true);\r\n\r\n  const switchImages = (stringOfPicToChange) => {\r\n    let imgToChangeId = document.getElementById(\"bellpalWatchRegular\"); // Id of image to change\r\n\r\n    if (imgToChangeId.getAttribute(\"src\") == \"BellpalWatch_ORIGINAL_new.png\") {\r\n      imgToChangeId.src = stringOfPicToChange;\r\n    }\r\n    else if (imgToChangeId.getAttribute(\"src\") == stringOfPicToChange) {\r\n      imgToChangeId.src = \"BellpalWatch_ORIGINAL_new.png\";\r\n    }\r\n    else {\r\n      console.log(\"WROOONG\");\r\n    }\r\n  }\r\n\r\n  const disableAllArrows = (arrowId) => {\r\n    for (var arrow of allArrows) {\r\n      disableArrow(arrow);\r\n    }\r\n  }\r\n\r\n  const disableArrow = (arrowId) => {\r\n    document.getElementById(arrowId).style.opacity = 0.3;\r\n  }\r\n  const enableArrow = (arrowId) => {\r\n    document.getElementById(arrowId).style.opacity = 0.9;\r\n  }\r\n\r\n  // Function to switch between two images so watch LED appears to be blinking in a certain color\r\n  const startBlinking = (stringOfPicToChange) => {\r\n    // Clear previous interval and set the render image to original bellpalWatch image without LED light\r\n    clearInterval(blinkingLEDintervalId);\r\n    let imgToChangeId = document.getElementById(\"bellpalWatchRegular\"); // Id of image to changg\r\n    imgToChangeId.src = \"BellpalWatch_ORIGINAL_new.png\";\r\n\r\n    // Start interval with specific id and switch image between original BP image and color changed BP image\r\n    const blinkLEDId = setInterval(() => {\r\n      switchImages(stringOfPicToChange);\r\n    }, 1000);\r\n    setBlinkingLEDintervalId(blinkLEDId);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    // On FIRST render of the webpage we set initialRender to false and return\r\n    // Otherwise this useEffect() acts on the isAlarmingFollowers === true\r\n    // this is to NOT set label to \"alarm sent to followers\" on startup\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n      document.getElementById(\"EMPTYBTN1\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN2\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN3\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN4\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN5\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN6\").style.opacity = 0; // renderes the empty button invisible\r\n      document.getElementById(\"EMPTYBTN7\").style.opacity = 0; // renderes the empty button invisible\r\n      return;\r\n    }\r\n    // If we are alarming followers we need to clear the counter interval and enable \"confirm alarm btn\"\r\n    else if (isAlarmingFollowers === true) {\r\n      console.log(\"We acted on isAlarmingFollowers\");\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-danger\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Alarm sent to followers!\";\r\n\r\n      clearInterval(intervalId);\r\n      setCounter(0);\r\n      enableButton(\"ConfirmAlarmBtn\");\r\n\r\n      setIsAlarmingFollowers(false);\r\n    }\r\n    else {\r\n      console.log(\"We DID NOT act on isAlarmingFollowers\");\r\n    }\r\n  }, [isAlarmingFollowers]);\r\n\r\n  const confirmWatchAlarmFromPhone = () => {\r\n    setCurrentState(ENUMSTATE.ALARM_CONFIRMED_STATE);\r\n  };\r\n\r\n  const changeOpacityOnStateButton = (buttonId) => {\r\n    if (previousButton != null) { document.getElementById(previousButton).style.opacity = 0.3; }\r\n    document.getElementById(buttonId).style.opacity = 1.0;\r\n    setPreviousButton(buttonId);\r\n  };\r\n\r\n  // Statehandler below. Change settings based on what state we are currently in\r\n  useEffect(() => {\r\n\r\n    let timerGang;\r\n    if (currentState === ENUMSTATE.DEEP_SLEEP_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.deepSleep);\r\n      disableAllArrows();\r\n      enableArrow(\"deepSleepToFactoryArrow\");\r\n      document.getElementById(\"bellpalWatchRegular\").src = \"BellpalWatch_ORIGINAL_new.png\"\r\n      clearInterval(blinkingLEDintervalId);\r\n\r\n      changeOpacityOnStateButton(\"deepSleepStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      enableButton(\"QuickPress\"); // Enters factory default\r\n      disableButton(\"ShortHold\");\r\n      disableButton(\"MediumHold\");\r\n      disableButton(\"LongHold\");\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-dark\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"In deep sleep mode\";\r\n\r\n      // Resetting the factoryReset bool to false to not get stuck in deep sleep state\r\n      if (isFactoryResetActive === true) { setIsFactoryResetActive(false); }\r\n    }\r\n    else if (currentState === ENUMSTATE.FACTORY_DEFAULT_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.factoryDefault);\r\n      disableAllArrows();\r\n      enableArrow(\"factoryDefaultToDeepSleepArrow\");\r\n      enableArrow(\"factoryDefaultToSensingArrow\");\r\n      if (isFactoryResetActive === false) {\r\n        startBlinking(\"BellpalWatch_BLUE_new.png\");\r\n      }\r\n\r\n      changeOpacityOnStateButton(\"factoryDefaultStateBtn\");\r\n\r\n      timerGang = setTimeout(() => setCurrentState(ENUMSTATE.DEEP_SLEEP_STATE), 120000);// Changes back to deepSleep state after 120 sec // CHANGE TO 120 SEC\r\n\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      enableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      disableButton(\"MediumHold\");\r\n      disableButton(\"LongHold\");\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-primary custom-Blue-Badge\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Looking for bluetooth connection\";\r\n\r\n      // If factoryReset bool is true we will go through this.factoryDefault state to deep sleep state\r\n      if (isFactoryResetActive === true) {\r\n        // Need to clear the above timer timerGang since we are using a new timer for isFactoryResetActive mode \r\n        clearTimeout(timerGang);\r\n        clearInterval(blinkingLEDintervalId); // Clearing this so we dont blink as we pass towards deep sleep state\r\n        timerGang = setTimeout(() => setCurrentState(ENUMSTATE.DEEP_SLEEP_STATE), 2000); // Deep sleep after 2sec\r\n        disableButton(\"ConnectWatchToPhone\");\r\n        document.getElementById(\"TopAlarmLabel\").innerHTML = \"Passing through Factory default state\";\r\n      }\r\n    }\r\n    else if (currentState === ENUMSTATE.SENSING_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.sensing);\r\n      disableAllArrows();\r\n      enableArrow(\"sensingToFactoryDefaultArrow\");\r\n      enableArrow(\"sensingToLightSleep\");\r\n      enableArrow(\"sensingToNotifyingFallAlarm\");\r\n      enableArrow(\"sensingToNotifyingManualAlarm\");\r\n      document.getElementById(\"bellpalWatchRegular\").src = \"BellpalWatch_ORIGINAL_new.png\"\r\n      clearInterval(blinkingLEDintervalId);\r\n\r\n      timerGang = setTimeout(() => setCurrentState(ENUMSTATE.LIGHT_SLEEP_STATE), 120000); // Changes state to lightSleep after 10 sec (inactivity)// CHANGE TO 120 SEC\r\n\r\n      changeOpacityOnStateButton(\"sensingStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");  // Man får grönt ljus men ingen action\r\n      enableButton(\"ShortHold\");    // Man får grönt ljus och vid 10s trigarr man manual alarm\r\n      disableButton(\"MediumHold\");  // Man får grönt ljus men ingen action\r\n      enableButton(\"LongHold\");     // Man får grönt ljus och gör factory reset efter 30s\r\n      enableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-primary custom-Badge-Connected\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Connected to phone and sensing\";\r\n\r\n      // If we make a factory reset we need to go through this.sensing state to factory default state \r\n      if (isFactoryResetActive === true) {\r\n        clearInterval(blinkingLEDintervalId); // Clearing this so we dont blink as we pass towards deep sleep state\r\n        document.getElementById(\"TopAlarmLabel\").innerHTML = \"Passing through Sensing state\";\r\n        // Need to clear the above timer since we are using a new timer for isFactoryResetActive mode \r\n        clearTimeout(timerGang);\r\n        timerGang = setTimeout(() => setCurrentState(ENUMSTATE.FACTORY_DEFAULT_STATE), 2000); // Factory default after 2sec \r\n        disableButton(\"ShortHold\");    // On factory reset we need to disable all buttons\r\n        disableButton(\"LongHold\");     // On factory reset we need to disable all buttons\r\n        disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n      }\r\n    }\r\n    else if (currentState === ENUMSTATE.LIGHT_SLEEP_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.lightSleep);\r\n      disableAllArrows();\r\n      enableArrow(\"lightSleepToSensing\");\r\n      document.getElementById(\"bellpalWatchRegular\").src = \"BellpalWatch_ORIGINAL_new.png\"\r\n      clearInterval(blinkingLEDintervalId);\r\n      changeOpacityOnStateButton(\"lightSleepStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");  // Man får grönt ljus men ingen action\r\n      enableButton(\"ShortHold\");    // Man får grönt ljus och vid 10s trigarr man manual alarm\r\n      disableButton(\"MediumHold\");  // Man får grönt ljus men ingen action\r\n      enableButton(\"LongHold\");     // Man får grönt ljus och gör factory reset efter 30s\r\n      enableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-dark\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Light sleeping mode active\";\r\n    }\r\n    else if (currentState === ENUMSTATE.NOTIFYING_APP_FALL_ALARM_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.notifyingAppFallAlarm);\r\n      disableAllArrows();\r\n      enableArrow(\"notifyingFallAlarmToSendingAlarm\");\r\n      enableArrow(\"notifyingFallAlarmToResettingAlarm\");\r\n      startBlinking(\"BellpalWatch_RED_new.png\");\r\n      changeOpacityOnStateButton(\"notifyingAppFallAlarmStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      enableButton(\"MediumHold\");   // Reset alarm\r\n      enableButton(\"LongHold\");     // Factory reset watch\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      // 5 second timer before we enter Sending alarm state\r\n      timerGang = setTimeout(() => setCurrentState(ENUMSTATE.SENDING_ALARM_STATE), waitTenSeconds);\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-info custom-Badge-Trying-Send\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Notifying a fall alarm to the app\";\r\n    }\r\n    else if (currentState === ENUMSTATE.NOTIFYING_APP_MANUAL_ALARM_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.notifyingAppManualAlarm);\r\n      disableAllArrows();\r\n      enableArrow(\"notifyingManualAlarmToSendingAlarm\");\r\n      enableArrow(\"notifyingManualAlarmToResettingAlarm\");\r\n      startBlinking(\"BellpalWatch_RED_new.png\");\r\n      changeOpacityOnStateButton(\"notifyingAppManualAlarmStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      enableButton(\"MediumHold\");   // Reset alarm\r\n      enableButton(\"LongHold\");     // Factory reset watch\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      // 5 second timer before we enter Sending alarm state\r\n      timerGang = setTimeout(() => setCurrentState(ENUMSTATE.SENDING_ALARM_STATE), waitTenSeconds);\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-info custom-Badge-Trying-Send\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Notifying a manual alarm to the app\";\r\n    }\r\n    else if (currentState === ENUMSTATE.SENDING_ALARM_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.sendingAlarm);\r\n      disableAllArrows();\r\n      enableArrow(\"sendingAlarmToResettingAlarm\");\r\n      enableArrow(\"sendingAlarmToAlarmConfirmed\");\r\n      startBlinking(\"BellpalWatch_RED_new.png\");\r\n      changeOpacityOnStateButton(\"sendingAlarmStateBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      enableButton(\"MediumHold\");   // Reset alarm\r\n      enableButton(\"LongHold\");     // Factory reset watch\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      timerGang = startAlarmCounter();\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-warning\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Alarm confirmed. 30 sec until alarm starts\";\r\n    }\r\n    else if (currentState === ENUMSTATE.ALARM_CONFIRMED_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.alarmConfirmed);\r\n      disableAllArrows();\r\n      enableArrow(\"alarmConfirmedToResettingAlarm\");\r\n      startBlinking(\"BellpalWatch_GREEN_new.png\");\r\n      changeOpacityOnStateButton(\"alarmConfirmedStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      enableButton(\"MediumHold\");   // Reset alarm\r\n      enableButton(\"LongHold\");     // Factory reset watch\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n\r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-success\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Alarm confirmed by follower\";\r\n    }\r\n    else if (currentState === ENUMSTATE.RESETTING_ALARM_STATE) {\r\n      setCurrentStateInfoPanelText(panelTexts.state.resettingAlarm);\r\n      disableAllArrows();\r\n      enableArrow(\"resettingAlarmToSensing\");\r\n      document.getElementById(\"bellpalWatchRegular\").src = \"BellpalWatch_ORIGINAL_new.png\"\r\n      clearInterval(blinkingLEDintervalId);\r\n      setAlarmed(false);\r\n      clearInterval(intervalId);\r\n      setCounter(0);\r\n\r\n      changeOpacityOnStateButton(\"resettingAlarmStateBtn\");\r\n      disableButton(\"ConfirmAlarmBtn\");\r\n      disableButton(\"ConnectWatchToPhone\");\r\n      disableButton(\"QuickPress\");\r\n      disableButton(\"ShortHold\");\r\n      disableButton(\"MediumHold\");\r\n      disableButton(\"LongHold\");\r\n      disableButton(\"SimulateAutomaticFallAlarmBtn\");\r\n      // if isFactoryResetActive === true we need to go through sensing state towards deep sleep state. Although we\r\n      // ALWAYS go to sensing state from reset state so here it is not a problem.\r\n      timerGang = setTimeout(() => setCurrentState(ENUMSTATE.SENSING_STATE), waitTenSeconds); // Changes state to Sensing state after 10 sec ((waitFiveSeconds)) \r\n      document.getElementById(\"TopAlarmLabel\").className = \"badge badge-secondary\";\r\n      document.getElementById(\"TopAlarmLabel\").innerHTML = \"Resetting Alarm\";\r\n      if (isFactoryResetActive === true) {\r\n        document.getElementById(\"TopAlarmLabel\").innerHTML = \"Passing through Resetting Alarm state\";\r\n      }\r\n    }\r\n    return (() => {\r\n      // Each time currentSTate is being modified we clear the timer timerGang\r\n      clearTimeout(timerGang);\r\n    });\r\n  }, [currentState]);\r\n\r\n\r\n  const startAlarmCounter = () => {\r\n    // Resetting the counter and clearing the interval if there was any previously.\r\n    // Then we start the counter interval and assign it to our variable\r\n    setCounter(0);\r\n    clearInterval(intervalId);\r\n    setAlarmed(true);\r\n    const id = setInterval(() => {\r\n      setCounter((counter) => counter + 1);\r\n    }, 1000);\r\n    setIntervalId(id);\r\n\r\n    const timerGang = setTimeout(() => setIsAlarmingFollowers(true), waitTenSeconds); // After 10 sec we change a boolean to display that alarm is being sent to followers // SHOULD BE 30sek IRL\r\n    return timerGang;\r\n  }\r\n\r\n  const connectWatchToPhone = () => {\r\n    setCurrentState(ENUMSTATE.SENSING_STATE);\r\n\r\n  };\r\n  const enableButton = (buttonId) => {\r\n    document.getElementById(buttonId).disabled = false;\r\n    document.getElementById(buttonId).style.fontWeight = \"bold\";\r\n  };\r\n  const disableButton = (buttonId) => {\r\n    document.getElementById(buttonId).disabled = true;\r\n    document.getElementById(buttonId).style.fontWeight = \"normal\";\r\n  };\r\n\r\n  const handleOnWatchButton_QuickPress = () => {\r\n    // This buttonpress lights up a green dot on the watch on some states. TO-DO - for later\r\n    setCurrentState(ENUMSTATE.FACTORY_DEFAULT_STATE);\r\n  };\r\n\r\n  // Short hold(2s) will trigger manual alarm but ONLY if watch is not already alarmed\r\n  const handleOnWatchButton_ShortHold = () => {\r\n    if (alarmed === false && (currentState === ENUMSTATE.LIGHT_SLEEP_STATE || currentState === ENUMSTATE.SENSING_STATE)) {\r\n      setCurrentState(ENUMSTATE.NOTIFYING_APP_MANUAL_ALARM_STATE);\r\n      // TO-DO - Make an \"Automatic fall alarm button\" available in light sleep and sensing state\r\n    }\r\n    else { console.log(\"TEST well well well alarmed is: \" + alarmed); }\r\n  };\r\n\r\n  // Medium hold(10s) will reset the current alarm\r\n  const handleOnWatchButton_MediumHold = () => {\r\n    setCurrentState(ENUMSTATE.RESETTING_ALARM_STATE);\r\n  };\r\n\r\n  // Long hold(30s) will set state back to deepSleep state\r\n  const handleOnWatchButton_LongHold = () => {\r\n    setIsFactoryResetActive(true);\r\n    if (currentState === ENUMSTATE.LIGHT_SLEEP_STATE) {\r\n      setCurrentState(ENUMSTATE.SENSING_STATE);\r\n    }\r\n    else if (currentState === ENUMSTATE.SENSING_STATE) {\r\n      setCurrentState(ENUMSTATE.FACTORY_DEFAULT_STATE);\r\n    }\r\n    else {\r\n      setCurrentState(ENUMSTATE.RESETTING_ALARM_STATE);\r\n    }\r\n  };\r\n\r\n  const simulateAutomaticFallAlarm = () => {\r\n    setCurrentState(ENUMSTATE.NOTIFYING_APP_FALL_ALARM_STATE);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"container\">\r\n        <div id=\"leftSide\">\r\n          <nav id=\"navbarLeft\" className=\"navbar navbar-dark bg-primary\" style={{ border: \"\" }}>Alarm buttons</nav>\r\n          <h2> <span className=\"badge m-2 badge-light custom-Badge\">{counter}</span> </h2>\r\n          <div>\r\n            <h3> <p className=\"badge m-2 badge-primary\" id=\"TopAlarmLabel\">Alarm is not active</p> </h3>\r\n          </div>\r\n          <div>\r\n            <img id=\"bellpalWatchRegular\" src=\"BellpalWatch_ORIGINAL_new.png\"></img>\r\n          </div>\r\n\r\n          {/* AUTOMATIC FALL, CONFIRM ALARM AND CONNECT WATCH TO PHONE BUTTONS BELOW */}\r\n          <div className=\"btn-group-vertical m-2\">\r\n            <AlarmButton id=\"SimulateAutomaticFallAlarmBtn\" onHoverText=\"Press this button to simulate an automatic fall alarm triggered by\r\n              the watch fall algorithm. This will make the watch enter Notify App Fall Alarm state and continue into Sending Alarm state\"\r\n              className=\"btn btn-danger btn-sm btn-Automatic-Fall m-1\" onClickFunctionName={() => simulateAutomaticFallAlarm()} buttonsText=\"Automatic fall alarm\" >\r\n            </AlarmButton>\r\n\r\n            <AlarmButton id=\"ConfirmAlarmBtn\" onHoverText=\"Press this button to simulate that an alarm has been confirmed by any follower of the wearer\"\r\n              className=\"btn btn-danger btn-sm btn-Confirm-Alarm m-1\" onClickFunctionName={() => confirmWatchAlarmFromPhone()} buttonsText=\"Confirm Alarm From Phone\" >\r\n            </AlarmButton>\r\n\r\n            <AlarmButton id=\"ConnectWatchToPhone\" onHoverText=\"Press this button to simulate a successful bluetooth pairing from the watch to a smartphone\"\r\n              className=\"btn btn-danger btn-sm btn-Connect-To-Phone m-1\" onClickFunctionName={() => connectWatchToPhone()} buttonsText=\"Connect Watch To Phone\" >\r\n            </AlarmButton>\r\n          </div>\r\n\r\n          {/* WATCH ALARM BUTTON VARIATIONS BELOW */}\r\n          <div className=\"btn-group-vertical m-3\">         \r\n            <AlarmButton id=\"QuickPress\" onHoverText=\"Pressing the alarm button quickly will make the watch go from Deep Sleep state to Factory Default state\"\r\n              className=\"btn btn-danger btn-sm btn-Quick-Press m-1\" onClickFunctionName={() => handleOnWatchButton_QuickPress()} buttonsText=\"Quick press\" >\r\n            </AlarmButton>\r\n\r\n            <AlarmButton id=\"ShortHold\" onHoverText=\"Holding the watch alarm button for 2 seconds will initiate the alarm\r\n              function. This will make the watch enter Notify App Manual Alarm state and continue to the Sending Alarm state\"\r\n              className=\"btn btn-danger btn-sm btn-Short-Hold m-1\" onClickFunctionName={() => handleOnWatchButton_ShortHold()} buttonsText=\"Short hold\" >\r\n            </AlarmButton>\r\n\r\n            <AlarmButton id=\"MediumHold\" onHoverText=\"Holding the watch alarm button for 10 seconds will initiate a reset of the ongoing alarm.\r\n              This will make the watch enter Resetting State and continue to Sensing State\" className=\"btn btn-danger btn-sm btn-Medium-Hold m-1\"\r\n              onClickFunctionName={() => handleOnWatchButton_MediumHold()} buttonsText=\"Medium hold\" >\r\n            </AlarmButton>\r\n\r\n            <AlarmButton id=\"LongHold\" onHoverText=\"Holding the watch alarm button for 30 seconds will initiate a factory reset on the watch.\r\n              This reset will step through several states until finally reaching the Deep Sleep state\" className=\"btn btn-danger btn-sm btn-Long-Hold m-1\"\r\n              onClickFunctionName={() => handleOnWatchButton_LongHold()} buttonsText=\"Long hold\" >\r\n            </AlarmButton>\r\n          </div>\r\n\r\n          <nav id=\"navbarStateInfo\" className=\"navbar navbar-dark bg-primary\" style={{ border: \"\" }}>State info panel</nav>\r\n\r\n          <div id=\"stateInfoPanel\">\r\n            <div id=\"stateText\" style={{ margin: 20, fontSize: 18 }}>\r\n              {currentStateInfoPanelText}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"rightSide\">\r\n          <nav id=\"navbarRight\" className=\"navbar navbar-dark bg-primary\" style={{ border: \"\" }}>State machine for bellpal watch with the current state highlighted</nav>\r\n          <div>\r\n            {topBtnArray.map((stateBtnObject) => {\r\n              return (\r\n                <StateButton\r\n                  id={stateBtnObject.btnId}\r\n                  text={stateBtnObject.textOnBtn}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div>\r\n            {midTopBtnArray.map((stateBtnObject) => {\r\n              return (\r\n                <StateButton\r\n                  id={stateBtnObject.btnId}\r\n                  text={stateBtnObject.textOnBtn}\r\n                />\r\n              );\r\n           })}\r\n          </div>\r\n\r\n          <div>\r\n            {midBtnArray.map((stateBtnObject) => {\r\n              return (\r\n                <StateButton\r\n                  id={stateBtnObject.btnId}\r\n                  text={stateBtnObject.textOnBtn}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div>\r\n            {botBtnArray.map((stateBtnObject) => {\r\n              return (\r\n                <StateButton\r\n                  id={stateBtnObject.btnId}\r\n                  text={stateBtnObject.textOnBtn}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <Xarrow {...xArrowProps.botToTopProps} id=\"deepSleepToFactoryArrow\" start=\"deepSleepStateBtn\" end=\"factoryDefaultStateBtn\" />\r\n        <Xarrow {...xArrowProps.returnTopToBotProps} id=\"factoryDefaultToDeepSleepArrow\" start=\"factoryDefaultStateBtn\" end=\"deepSleepStateBtn\" />\r\n        <Xarrow {...xArrowProps.botToTopProps} id=\"factoryDefaultToSensingArrow\" start=\"factoryDefaultStateBtn\" end=\"sensingStateBtn\" />\r\n        <Xarrow {...xArrowProps.returnTopToBotProps} id=\"sensingToFactoryDefaultArrow\" start=\"sensingStateBtn\" end=\"factoryDefaultStateBtn\" />\r\n        <Xarrow {...xArrowProps.botToTopProps} id=\"sensingToLightSleep\" start=\"sensingStateBtn\" end=\"lightSleepStateBtn\" />\r\n        <Xarrow {...xArrowProps.returnTopToBotProps} id=\"lightSleepToSensing\" start=\"lightSleepStateBtn\" end=\"sensingStateBtn\" />\r\n\r\n        <Xarrow {...xArrowProps.sensingToNotifyAutoFall} id=\"sensingToNotifyingFallAlarm\" start=\"sensingStateBtn\" end=\"notifyingAppFallAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.sensingToNotifyManualAlarm} id=\"sensingToNotifyingManualAlarm\" start=\"sensingStateBtn\" end=\"notifyingAppManualAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.manualFallToSendAlarm} id=\"notifyingManualAlarmToSendingAlarm\" start=\"notifyingAppManualAlarmStateBtn\" end=\"sendingAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.autoFallNotifyToSendAlarm} id=\"notifyingFallAlarmToSendingAlarm\" start=\"notifyingAppFallAlarmStateBtn\" end=\"sendingAlarmStateBtn\" />\r\n\r\n        <Xarrow {...xArrowProps.autoFallNotifyToResetAlarm} id=\"notifyingFallAlarmToResettingAlarm\" start=\"notifyingAppFallAlarmStateBtn\" end=\"resettingAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.sendingToResetAlarm} id=\"sendingAlarmToResettingAlarm\" start=\"sendingAlarmStateBtn\" end=\"resettingAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.manualAlarmToResetAlarm} id=\"notifyingManualAlarmToResettingAlarm\" start=\"notifyingAppManualAlarmStateBtn\" end=\"resettingAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.sendingToConfirmAlarm} id=\"sendingAlarmToAlarmConfirmed\" start=\"sendingAlarmStateBtn\" end=\"alarmConfirmedStateBtn\" />\r\n        <Xarrow {...xArrowProps.alarmConfirmedToResetAlarm} id=\"alarmConfirmedToResettingAlarm\" start=\"alarmConfirmedStateBtn\" end=\"resettingAlarmStateBtn\" />\r\n        <Xarrow {...xArrowProps.resettingAlarmToSensing} id=\"resettingAlarmToSensing\" start=\"resettingAlarmStateBtn\" end=\"sensingStateBtn\" />  \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonBar;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ButtonBar from './components/buttonBar'\r\n\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css'; // optional\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      style={{ backgroundColor: \"#FFEAD0\" }}\r\n    >\r\n\r\n      <ButtonBar />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport ButtonBar from './components/buttonBar'\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}